services:
  astarte-housekeeping:
    image: astarte/astarte_housekeeping:1.2-snapshot
    build:
      context: apps/astarte_housekeeping
    env_file:
      - ./.env
    environment:
      HOUSEKEEPING_API_JWT_PUBLIC_KEY_PATH: "/keys/housekeeping_public.pem"
    volumes:
      - ./compose/astarte-keys/housekeeping_public.pem:/keys/housekeeping_public.pem:z
    restart: on-failure
    depends_on:
      - "rabbitmq"
      - "traefik"
      - "scylla"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.astarte-housekeeping.rule=Host(`api.${DOCKER_COMPOSE_ASTARTE_BASE_DOMAIN}`)"
      - "traefik.http.routers.astarte-housekeeping.rule=PathPrefix(`/housekeeping`)"
      - "traefik.http.routers.astarte-housekeeping.entrypoints=web"
      - "traefik.http.routers.astarte-housekeeping.middlewares=astarte-housekeeping"
      - "traefik.http.routers.astarte-housekeeping.service=astarte-housekeeping"
      - "traefik.http.middlewares.astarte-housekeeping.stripprefix.prefixes=/housekeeping"
      - "traefik.http.middlewares.astarte-housekeeping.stripprefix.forceSlash=false"
      - "traefik.http.services.astarte-housekeeping.loadbalancer.server.port=4001"

  astarte-realm-management:
    image: astarte/astarte_realm_management:1.2-snapshot
    build:
      context: apps/astarte_realm_management
    env_file:
      - ./.env
    restart: on-failure
    depends_on:
      - "rabbitmq"
      - "scylla"

  astarte-realm-management-api:
    image: astarte/astarte_realm_management_api:1.2-snapshot
    build:
      context: apps/astarte_realm_management_api
    env_file:
      - ./.env
    restart: on-failure
    depends_on:
      - "rabbitmq"
      - "traefik"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.astarte-realm-management-api.rule=Host(`api.${DOCKER_COMPOSE_ASTARTE_BASE_DOMAIN}`)"
      - "traefik.http.routers.astarte-realm-management-api.rule=PathPrefix(`/realmmanagement`)"
      - "traefik.http.routers.astarte-realm-management-api.entrypoints=web"
      - "traefik.http.routers.astarte-realm-management-api.middlewares=astarte-realm-management-api"
      - "traefik.http.routers.astarte-realm-management-api.service=astarte-realm-management-api"
      - "traefik.http.middlewares.astarte-realm-management-api.stripprefix.prefixes=/realmmanagement"
      - "traefik.http.middlewares.astarte-realm-management-api.stripprefix.forceSlash=false"
      - "traefik.http.services.astarte-realm-management-api.loadbalancer.server.port=4000"

  astarte-pairing:
    image: astarte/astarte_pairing:1.2-snapshot
    build:
      context: apps/astarte_pairing
    env_file:
      - ./.env
    environment:
      PAIRING_CFSSL_URL: "http://cfssl:8080"
    restart: on-failure
    depends_on:
      - "rabbitmq"
      - "scylla"
      - "traefik"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.astarte-pairing.rule=Host(`api.${DOCKER_COMPOSE_ASTARTE_BASE_DOMAIN}`)"
      - "traefik.http.routers.astarte-pairing.rule=PathPrefix(`/pairing`)"
      - "traefik.http.routers.astarte-pairing.entrypoints=web"
      - "traefik.http.routers.astarte-pairing.middlewares=astarte-pairing"
      - "traefik.http.routers.astarte-pairing.service=astarte-pairing"
      - "traefik.http.middlewares.astarte-pairing.stripprefix.prefixes=/pairing"
      - "traefik.http.middlewares.astarte-pairing.stripprefix.forceSlash=false"
      - "traefik.http.services.astarte-pairing.loadbalancer.server.port=4003"

  astarte-appengine-api:
    image: astarte/astarte_appengine_api:1.2-snapshot
    build:
      context: apps/astarte_appengine_api
    env_file:
      - ./.env
    environment:
      APPENGINE_API_ROOMS_AMQP_CLIENT_HOST: "rabbitmq"
    restart: on-failure
    depends_on:
      - "rabbitmq"
      - "scylla"
      - "traefik"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.astarte-appengine-api.rule=Host(`api.${DOCKER_COMPOSE_ASTARTE_BASE_DOMAIN}`)"
      - "traefik.http.routers.astarte-appengine-api.rule=PathPrefix(`/appengine`)"
      - "traefik.http.routers.astarte-appengine-api.entrypoints=web"
      - "traefik.http.routers.astarte-appengine-api.middlewares=astarte-appengine-api"
      - "traefik.http.routers.astarte-appengine-api.service=astarte-appengine-api"
      - "traefik.http.middlewares.astarte-appengine-api.stripprefix.prefixes=/appengine"
      - "traefik.http.middlewares.astarte-appengine-api.stripprefix.forceSlash=false"
      - "traefik.http.services.astarte-appengine-api.loadbalancer.server.port=4002"

  astarte-data-updater-plant:
    image: astarte/astarte_data_updater_plant:1.2-snapshot
    build:
      context: apps/astarte_data_updater_plant
    env_file:
      - ./.env
    environment:
      DATA_UPDATER_PLANT_AMQP_CONSUMER_HOST: "rabbitmq"
      DATA_UPDATER_PLANT_AMQP_PRODUCER_HOST: "rabbitmq"
      DATA_UPDATER_PLANT_AMQP_PRODUCER_PORT: "5672"
      DATA_UPDATER_PLANT_AMQP_PRODUCER_USERNAME: "guest"
      DATA_UPDATER_PLANT_AMQP_PRODUCER_PASSWORD: "guest"
      DATA_UPDATER_PLANT_AMQP_PRODUCER_VIRTUAL_HOST: "/"
    restart: on-failure
    depends_on:
      - "rabbitmq"
      - "scylla"

  astarte-trigger-engine:
    image: astarte/astarte_trigger_engine:1.2-snapshot
    build:
      context: apps/astarte_trigger_engine
    env_file:
      - ./.env
    environment:
      TRIGGER_ENGINE_AMQP_CONSUMER_HOST: "rabbitmq"
    restart: on-failure
    depends_on:
      - "rabbitmq"
      - "scylla"

  astarte-dashboard:
    image: astarte/astarte-dashboard:1.2-snapshot
    volumes:
      - ./compose/astarte-dashboard/config.json:/usr/share/nginx/html/user-config/config.json:z
    depends_on:
      - "astarte-realm-management-api"
      - "astarte-appengine-api"
      - "traefik"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.astarte-dashboard.rule=Host(`dashboard.${DOCKER_COMPOSE_ASTARTE_BASE_DOMAIN}`)"
      - "traefik.http.routers.astarte-dashboard.entrypoints=web"
      - "traefik.http.routers.astarte-dashboard.service=astarte-dashboard"
      - "traefik.http.services.astarte-dashboard.loadbalancer.server.port=80"

  astarte-grafana:
    image: astarte/grafana:1.2.0
    depends_on:
      - "astarte-appengine-api"
      - "traefik"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.astarte-grafana.rule=Host(`grafana.${DOCKER_COMPOSE_ASTARTE_BASE_DOMAIN}`)"
      - "traefik.http.routers.astarte-grafana.entrypoints=web"
      - "traefik.http.routers.astarte-grafana.service=astarte-grafana"
      - "traefik.http.services.astarte-grafana.loadbalancer.server.port=3000"

  traefik:
    image: traefik:v2.9
    restart: on-failure
    command:
      # Uncomment this if you want to enable Traefik's web UI
      # - "--api.insecure=true"
      # Tells Traefik to listen to docker
      - "--providers.docker"
      # Don't expose everything
      - "--providers.docker.exposedbydefault=false"
      # Expose Astarte API/Dahsboard/Grafana
      - "--entrypoints.web.address=:80"
      # Expose Astarte broker
      - "--entryPoints.vernemq.address=:8883"
    ports:
      # The HTTP port
      - "80:80"
      # Uncomment this if you want to display Traefik's web UI (enabled by --api.insecure=true)
      # - "8080:8080"
      # VerneMQ's SSL Listener
      - "8883:8883"
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock:z
    security_opt:
      - label=type:container_runtime_t
    networks:
      default:
        aliases:
          # Create traefik aliases for its hosts, so that other containers
          # in the same network can curl them.
          - api.${DOCKER_COMPOSE_ASTARTE_BASE_DOMAIN}
          - dashboard.${DOCKER_COMPOSE_ASTARTE_BASE_DOMAIN}
          - grafana.${DOCKER_COMPOSE_ASTARTE_BASE_DOMAIN}
          - broker.${DOCKER_COMPOSE_ASTARTE_BASE_DOMAIN}

  # RabbitMQ
  rabbitmq:
    image: rabbitmq:3.12.0-management
    restart: on-failure
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq

  # CFSSL
  cfssl:
    image: astarte/cfssl:1.5.0-astarte.4
    volumes:
      - ./compose/cfssl-config:/config:z
      - cfssl-data:/data
    command: cfssl serve -address=0.0.0.0 -ca=/data/ca.pem -ca-key=/data/ca-key.pem -port=8080 -config=/etc/cfssl/ca_root_config.json
    # Restart if we fail
    restart: on-failure

  # Scylla
  scylla:
    image: scylladb/scylla:5.2.2
    restart: on-failure
    volumes:
      - scylla-data:/var/lib/scylla

  # VerneMQ
  vernemq:
    image: astarte/vernemq:1.2-snapshot
    env_file:
      - ./.env
    environment:
      DOCKER_VERNEMQ_LISTENER__SSL__DEFAULT__CAFILE: "/opt/vernemq/etc/ca.pem"
      DOCKER_VERNEMQ_LISTENER__SSL__DEFAULT__CERTFILE: "/opt/vernemq/etc/cert.pem"
      DOCKER_VERNEMQ_LISTENER__SSL__DEFAULT__KEYFILE: "/opt/vernemq/etc/privkey.pem"
      DOCKER_VERNEMQ_ASTARTE_VMQ_PLUGIN__AMQP__USERNAME: "guest"
      DOCKER_VERNEMQ_ASTARTE_VMQ_PLUGIN__AMQP__PASSWORD: "guest"
      DOCKER_VERNEMQ_ASTARTE_VMQ_PLUGIN__AMQP__HOST: "rabbitmq"
      DOCKER_VERNEMQ_USER_appengine: "appengine"
      DOCKER_VERNEMQ_ASTARTE_VMQ_PLUGIN__CASSANDRA__NODES: "scylla:9042"
      CFSSL_URL: "http://cfssl:8080"
    volumes:
      - vernemq-data:/opt/vernemq/data
      - ./compose/vernemq-certs:/etc/ssl/vernemq-certs:z
    depends_on:
      - "cfssl"
      - "rabbitmq"
      - "traefik"
    # Ensure we wait for rabbit and cfssl
    command: wait-for rabbitmq:5672 -t 90 -- wait-for cfssl:8080 -t 90 -- /opt/vernemq/bin/vernemq.sh
    # Restart if we fail
    restart: on-failure
    labels:
      - "traefik.enable=true"
      - "traefik.tcp.routers.vernemq.rule=HostSNI(`broker.${DOCKER_COMPOSE_ASTARTE_BASE_DOMAIN}`)"
      - "traefik.tcp.routers.vernemq.entrypoints=vernemq"
      - "traefik.tcp.routers.vernemq.tls.passthrough=true"
      - "traefik.tcp.routers.vernemq.service=vernemq"
      - "traefik.tcp.services.vernemq.loadbalancer.server.port=8883"

volumes:
  rabbitmq-data:
  scylla-data:
  vernemq-data:
  cfssl-data:

networks:
  default:
    name: astarte
