# Copyright 2017-2024 SECO Mind Srl
#
# SPDX-License-Identifier: Apache-2.0

#
# This file is part of Astarte.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

openapi: 3.0.0
servers:
  - url: '{base_url}/v1'
    variables:
      base_url:
        default: http://localhost:4002
        description: >-
          The base URL you're serving Astarte from. This should point to the base
          path from which AppEngine API is served. In case you are running a local
          installation, this is likely `http://localhost:4002`. In case you have a
          standard Astarte installation, it is most likely
          `https://<your host>/appengine`.

info:
  description: >-
    Astarte's AppEngine API is the main entry point for any operations which have
    an impact on devices and their data. Most Astarte applications would want to
    use this API to interact with devices, stream and receive data, and oversee
    their fleet.
  version: 1.3.0-dev
  title: Astarte App Engine API
  contact:
    email: info@ispirata.com
externalDocs:
  description: User documentation
  url: 'https://docs.astarte-platform.org/astarte/1.0/050-query_device.html'
tags:
  - name: device
    description: >-
      Device data status retrival and publish. All operations on a device can be
      done using both the device id or any of its aliases.
  - name: groups
    description: >-
      Manage groups creation, allowing to create a new group, add or remove
      devices from it and query devices that belong to it
  - name: stats
    description: >-
      Retrieve stats (e.g. total number of devices, connected devices, etc).
paths:
  '/{realm_name}/devices':
    get:
      tags:
        - device
      summary: Get devices list
      description: >-
        A paged list of all devices is returned. By default the device ID string
        is returned for each already registered device. The complete device
        status can be optionally retrieved rather than device ID string using
        details option.
      operationId: getDevicesList
      security:
        - JWT: []
      parameters:
        - name: realm_name
          in: path
          description: The name of the realm the device list will be returned from.
          required: true
          schema:
            type: string
        - name: from_token
          in: query
          description: >-
            Opaque devices list page pointer: it basically points to the
            beginning of a devices page. If not specified the devices list is
            displayed from the beginning. This format might change in future
            versions so it should be passed without any furhter assumption about
            type, format or its value.
          required: false
          schema:
            type: integer
        - name: limit
          in: query
          description: Maximum number of devices that will be returned for each page.
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1000
        - name: details
          in: query
          description: >-
            If true detailed device status for all devices is returned rather
            than the device id. See also DeviceStatus example.
          required: false
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Devices list
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: string
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        format: uri
                        description: A relative link to this response.
                      next:
                        type: string
                        format: uri
                        description: A relative link to next devices list page.
                example:
                  links:
                    self: /v1/example/devices?limit=3
                    next: >-
                      /v1/example/devices?from_token=-2128516163519372076&limit=3
                  data:
                    - hjnD0GrEP3o9ED1SUuL4QQ
                    - 8ZxuSGkU7pggwoomJeXo9g
                    - k-IFKDPoVzIXUcFkF7U80A
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/AuthorizationPathNotMatched'
  '/{realm_name}/devices/{device_id}':
    parameters:
      - name: realm_name
        in: path
        description: Name of the realm which the device belongs to.
        required: true
        schema:
          type: string
      - name: device_id
        in: path
        description: Device ID
        required: true
        schema:
          type: string
    get:
      tags:
        - device
      summary: Get device general status
      description: >-
        A device overview status is returned. Overview includes an array of
        reported interfaces (introspection), offline/online status, etc...
      operationId: getDeviceStatus
      security:
        - JWT: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/DeviceStatus'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/AuthorizationPathNotMatched'
        '404':
          description: Device not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
              examples:
                response:
                  value:
                    errors:
                      detail: Device not found
    patch:
      tags:
        - device
      summary: Update a device writeable property
      description: Update any of the writeable device properties such as device aliases, device attributes or credentials inhibited.
      operationId: updateDeviceStatus
      security:
        - JWT: []
      requestBody:
        content:
          application/merge-patch+json:
            schema:
              type: object
        description: >-
          A JSON Merge Patch containing the property changes which should be applied to
          the device.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/DeviceStatus'
        '400':
          description: Bad request
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/AuthorizationPathNotMatched'
        '404':
          description: Device not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
              examples:
                response:
                  value:
                    errors:
                      detail: Device not found
  '/{realm_name}/devices-by-alias/{device_alias}':
    parameters:
      - name: realm_name
        in: path
        description: Name of the realm which the device belongs to.
        required: true
        schema:
          type: string
      - name: device_alias
        in: path
        description: One of the device aliases
        required: true
        schema:
          type: string
    get:
      tags:
        - device
      summary: Get device general status
      description: >-
        A device overview status is returned. Overview includes an array of
        reported interfaces (introspection), offline/online status, etc...
      operationId: getDeviceStatusByAlias
      security:
        - JWT: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/DeviceStatus'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/AuthorizationPathNotMatched'
        '404':
          description: Device not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
              examples:
                response:
                  value:
                    errors:
                      detail: Device not found
    patch:
      tags:
        - device
      summary: Update a device writeable property
      description: Update any of the writeable device properties such as device aliases, device attributes or credentials inhibited.
      operationId: updateDeviceStatusByAlias
      security:
        - JWT: []
      requestBody:
        content:
          application/merge-patch+json:
            schema:
              type: object
        description: >-
          A JSON Merge Patch containing the property changes which should be applied to
          the device.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/DeviceStatus'
        '400':
          description: Bad request
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/AuthorizationPathNotMatched'
        '404':
          description: Device not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
              examples:
                response:
                  value:
                    errors:
                      detail: Device not found
  '/{realm_name}/devices/{device_id}/interfaces':
    get:
      tags:
        - device
      summary: Get interfaces list
      description: >-
        Get a list of interfaces supported by a certain device. Interfaces that
        are not reported by the device are not reported here. If a device stops
        to advertise a certain interface, it should be retrived from a different
        API, same applies for older versions of a certain interface.
      operationId: getInterfaces
      security:
        - JWT: []
      parameters:
        - name: realm_name
          in: path
          description: Name of the realm which the device belongs to.
          required: true
          schema:
            type: string
        - name: device_id
          in: path
          description: Device ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              examples:
                response:
                  value:
                    data:
                      - com.test.foo
                      - com.test.bar
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/AuthorizationPathNotMatched'
        '404':
          description: Device not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
              examples:
                response:
                  value:
                    errors:
                      detail: Device not found
  '/{realm_name}/devices/{device_id}/interfaces/{interface}':
    get:
      tags:
        - device
      summary: Get properties values
      description: >-
        Get a values snapshot for a given interface on a certain device. This
        action performed on a data stream interface returns the most recent set
        of data for each endpoint. More specific APIs should be used for
        advances data stream actions.
      operationId: getInterfacePropertiesValues
      security:
        - JWT: []
      parameters:
        - name: realm_name
          in: path
          description: Name of the realm which the device belongs to.
          required: true
          schema:
            type: string
        - name: device_id
          in: path
          description: Device ID
          required: true
          schema:
            type: string
        - name: interface
          in: path
          description: Interface name
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/AuthorizationPathNotMatched'
        '404':
          description: Interface not found in introspection or device not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
              examples:
                response:
                  value:
                    errors:
                      detail: Interface not found in device introspection
  '/{realm_name}/devices/{device_id}/interfaces/{interface}/{path}':
    get:
      tags:
        - device
      summary: Get property value
      description: >-
        Retrieve a value on a given path. This action on a data production path
        returns the last entry if no query parameters are specified.
      operationId: getInterfacePropertyValue
      security:
        - JWT: []
      parameters:
        - name: realm_name
          in: path
          description: Name of the realm which the device belongs to.
          required: true
          schema:
            type: string
        - name: device_id
          in: path
          description: Device ID
          required: true
          schema:
            type: string
        - name: interface
          in: path
          description: Interface name
          required: true
          schema:
            type: string
        - name: path
          in: path
          description: Endpoint Path
          required: true
          schema:
            type: string
        - name: since
          in: query
          description: >-
            Query all values since a certain timestamp (all entries where
            timestamp >= since). This query parameter applies only on data
            streams. It must be a ISO 8601 valid timestamp. It can't be used if
            since is already used. See also 'since-after', to' and 'limit'
            parameters.
          required: false
          schema:
            type: string
        - name: since_after
          in: query
          description: >-
            Query all values since after a certain timestamp (all entries where
            timestamp > since_after). This query parameter applies only on data
            streams. It must be a ISO 8601 valid timestamp. It can't be used if
            since is already specified. See also 'since', to' and 'limit'
            parameters.
          required: false
          schema:
            type: string
        - name: to
          in: query
          description: >-
            Query all values up to a certain timestamp. If since is not
            specified first entry date is assumed by default. This query
            parameter applies only on data streams. It must be a ISO 8601 valid
            timestamp. See also 'since' and 'limit' parameters.
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: >-
            Limit number of retrieved data production entries to 'limit'. This
            parameter must be always specified when 'since', 'since-after' and
            'to' query parameters are used. If limit is specified without any
            'since' and 'to' parameter, last 'limit' values are retrieved. When
            'limit' entries are returned, it should be checked if any other
            entry is left by using since-after the last received timestamp.  An
            error is returned if limit exceeds maximum allowed value. See also
            'since' and 'to' parameters.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Success
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/AuthorizationPathNotMatched'
        '404':
          description: >-
            Path not found or interface not found in introspection or device not
            found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
              examples:
                response:
                  value:
                    errors:
                      detail: Path not found
        '405':
          description: Invalid Request
    put:
      tags:
        - device
      summary: Update and push a value on a path
      description: >-
        Update and push a property value to the device on a certain endpoint
        path. interface should be an individual server owned property interface.
        It mustn't be used to stream data to a device or to update single
        properties that are members of an object aggregated interface.
      operationId: updatePathValue
      security:
        - JWT: []
      parameters:
        - name: realm_name
          in: path
          description: Name of the realm which the device belongs to.
          required: true
          schema:
            type: string
        - name: device_id
          in: path
          description: Device ID
          required: true
          schema:
            type: string
        - name: interface
          in: path
          description: Interface name
          required: true
          schema:
            type: string
        - name: path
          in: path
          description: Endpoint Path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
        '400':
          description: Bad request
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/AuthorizationPathNotMatched'
        '404':
          description: >-
            Endpoint not found or interface not found in introspection or device
            not found.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NotFoundError'
            application/json:
              examples:
                response:
                  value:
                    errors:
                      detail: Endpoint not found
        '405':
          description: Invalid object
    post:
      tags:
        - device
      summary: Stream data
      description: >-
        Stream a value on a certain path. Endpoint must be a member of a
        datastream interface.
      operationId: streamData
      security:
        - JWT: []
      parameters:
        - name: realm_name
          in: path
          description: Name of the realm which the device belongs to.
          required: true
          schema:
            type: string
        - name: device_id
          in: path
          description: Device ID
          required: true
          schema:
            type: string
        - name: interface
          in: path
          description: Interface name
          required: true
          schema:
            type: string
        - name: path
          in: path
          description: Endpoint Path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
        '400':
          description: Bad request
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/AuthorizationPathNotMatched'
        '404':
          description: >-
            Endpoint not found or interface not found in introspection or device
            not found.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NotFoundError'
            application/json:
              examples:
                response:
                  value:
                    errors:
                      detail: Endpoint not found
        '405':
          description: Invalid object
    delete:
      tags:
        - device
      summary: Delete path and push an unset value message
      description: >-
        Unset a value on a certain path, path is also deleted. Endpoint must
        support unset.
      operationId: deletePathValue
      security:
        - JWT: []
      parameters:
        - name: realm_name
          in: path
          description: Name of the realm which the device belongs to.
          required: true
          schema:
            type: string
        - name: device_id
          in: path
          description: Device ID
          required: true
          schema:
            type: string
        - name: interface
          in: path
          description: Interface name
          required: true
          schema:
            type: string
        - name: path
          in: path
          description: Endpoint Path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Success
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/AuthorizationPathNotMatched'
        '404':
          description: >-
            Path not found or interface not found in introspection or device not
            found.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NotFoundError'
            application/json:
              examples:
                response:
                  value:
                    errors:
                      detail: Path not found
        '405':
          description: Invalid object
  '/{realm_name}/groups':
    get:
      tags:
        - groups
      summary: Get groups list
      description: >-
        Return the list of device groups that exist in the realm.
      operationId: indexGroups
      security:
        - JWT: []
      parameters:
        - $ref: '#/components/parameters/RealmName'
      responses:
        '200':
          $ref: '#/components/responses/IndexGroups'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/AuthorizationPathNotMatched'
    post:
      tags:
        - groups
      summary: Create new group
      description: >-
        Create a new group with a set of devices.
        Devices must already be registered in the realm.
      operationId: createGroup
      security:
        - JWT: []
      parameters:
        - $ref: '#/components/parameters/RealmName'
      requestBody:
        $ref: '#/components/requestBodies/CreateGroup'
      responses:
        '201':
          $ref: '#/components/responses/GroupCreated'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/AuthorizationPathNotMatched'
        '422':
          $ref: '#/components/responses/InvalidGroupConfig'
  '/{realm_name}/groups/{group_name}':
    get:
      tags:
        - groups
      summary: Get group config
      description: >-
        Return the configuration of the group. Currently, it just returns the group name,
        but the call can be used to verify if a group exists.
      operationId: getGroupConfig
      security:
        - JWT: []
      parameters:
        - $ref: '#/components/parameters/RealmName'
        - $ref: '#/components/parameters/GroupName'
      responses:
        '200':
          $ref: '#/components/responses/GetGroup'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/AuthorizationPathNotMatched'
        '404':
          $ref: '#/components/responses/GroupNotFound'
  '/{realm_name}/groups/{group_name}/devices':
    get:
      tags:
        - groups
      summary: List devices in a group
      description: >-
        Return the list of devices in a group.
      operationId: indexGroupDevices
      security:
        - JWT: []
      parameters:
        - $ref: '#/components/parameters/RealmName'
        - $ref: '#/components/parameters/GroupName'
      responses:
        '200':
          $ref: '#/components/responses/IndexGroupDevices'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/AuthorizationPathNotMatched'
        '404':
          $ref: '#/components/responses/GroupNotFound'
    post:
      tags:
        - groups
      summary: Add device to group
      description: >-
        Add an existing device to a group.
      operationId: addDeviceToGroup
      security:
        - JWT: []
      parameters:
        - $ref: '#/components/parameters/RealmName'
        - $ref: '#/components/parameters/GroupName'
      requestBody:
        $ref: '#/components/requestBodies/AddDeviceToGroup'
      responses:
        '201':
          description: Success
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/AuthorizationPathNotMatched'
        '404':
          $ref: '#/components/responses/GroupNotFound'
        '422':
          $ref: '#/components/responses/InvalidAddGroup'
  '/{realm_name}/groups/{group_name}/devices/{device_id}':
    delete:
      tags:
        - groups
      summary: Remove device from group
      description: >-
        Remove device from group
      operationId: removeDeviceFromGroup
      security:
        - JWT: []
      parameters:
        - $ref: '#/components/parameters/RealmName'
        - $ref: '#/components/parameters/GroupName'
        - $ref: '#/components/parameters/DeviceId'
      responses:
        '204':
          description: Device removed
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/AuthorizationPathNotMatched'
        '404':
          $ref: '#/components/responses/GroupOrDeviceNotFound'
  '/{realm_name}/stats/devices':
    get:
      tags:
        - stats
      summary: Retrieve devices stats
      description: >-
        Return stats regarding devices in a Realm
      operationId: getDevicesStats
      security:
        - JWT: []
      parameters:
        - $ref: '#/components/parameters/RealmName'
      responses:
        '200':
          $ref: '#/components/responses/GetDevicesStats'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/AuthorizationPathNotMatched'
components:
  securitySchemes:
    JWT:
      type: apiKey
      name: Authorization
      in: header
      description: >
        To access APIs a valid JWT token must be passed in all requests
        in the `Authorization` header. This token should be signed with
        the private key associated with the realm the request refers to.


        The following syntax must be used in the `Authorization` header :
          `Bearer xxxxxx.yyyyyyy.zzzzzz`
  requestBodies:
    AddDeviceToGroup:
      content:
        application/json:
          schema:
            type: object
            required:
              - data
            properties:
              data:
                type: object
                required:
                  - device_id
                properties:
                  device_id:
                    description: The device id of the device to add
                    type: string
                    example: '8NWCESshRrmUe9FWhg39qQ'
    CreateGroup:
      content:
        application/json:
          schema:
            type: object
            required:
              - data
            properties:
              data:
                $ref: '#/components/schemas/CreateGroupConfig'
  responses:
    IndexGroups:
      description: Groups list
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                description: Group name list
                items:
                  type: string
                example:
                  - first-floor
                  - second-floor
    GetGroup:
      description: Groups list
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: '#/components/schemas/GroupConfig'
    GroupCreated:
      description: Success
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: '#/components/schemas/CreateGroupConfig'
    IndexGroupDevices:
      description: Group device list
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  type: string
                example:
                  - v8UxxIT9RkyPjIJZt6-Rrw
                  - fhd0WHcgSjWeVqPGKZv_KA
    InvalidAddGroup:
      description: Invalid request
      content:
        application/json:
          schema:
            type: object
            properties:
              errors:
                type: object
                properties:
                  device_id:
                    type: array
                    items:
                      type: string
                example:
                  device_id:
                    - does not exist
    InvalidGroupConfig:
      description: Invalid group configuration
      content:
        application/json:
          schema:
            type: object
            properties:
              errors:
                type: object
                properties:
                  group_name:
                    type: array
                    items:
                      type: string
                  devices:
                    type: array
                    items:
                      type: string
                example:
                  group_name:
                    - is invalid
    Unauthorized:
      description: Token/Realm doesn't exist or operation not allowed.
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/MissingTokenError'
              - $ref: '#/components/schemas/InvalidTokenError'
              - $ref: '#/components/schemas/InvalidAuthPathError'
              - $ref: '#/components/schemas/UnauthorizedError'
    AuthorizationPathNotMatched:
      description: Authorization path not matched.
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: '#/components/schemas/AuthorizationPathNotMatchedError'
    GroupNotFound:
      description: Group not found
      content:
        application/json:
          schema:
            type: object
            properties:
              errors:
                type: object
                properties:
                  detail:
                    type: string
                    example: Group not found
    GroupOrDeviceNotFound:
      description: Group or device not found
      content:
        application/json:
          schema:
            type: object
            properties:
              errors:
                type: object
                properties:
                  detail:
                    type: string
                    example: Device not found
    GetDevicesStats:
      description: Devices stats
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: '#/components/schemas/DevicesStats'
  parameters:
    GroupName:
      name: group_name
      in: path
      description: The name of the group.
      required: true
      schema:
        type: string
    RealmName:
      name: realm_name
      in: path
      description: The name of the realm the device list will be returned from.
      required: true
      schema:
        type: string
    DeviceId:
      name: device_id
      in: path
      description: Device id of the target device.
      required: true
      schema:
        type: string
  schemas:
    DeviceStatus:
      type: object
      properties:
        id:
          type: string
          description: The device ID.
        aliases:
          type: object
          description: >-
            A set of aliases and their tags. Each alias has an unique tag that
            identifies its purpose.
        attributes:
          type: object
          description: >-
            A set of attributes with their values. Each attribute has a unique key.
        introspection:
          type: object
          description: >-
            A dictionary of available (installed) interfaces on the device. For
            each interface version major and minor versions are provided.
            Interfaces that are listed here might not be available on the server
            (e.g. not installed).
        connected:
          type: boolean
          description: True if the device is connected to the broker.
        last_connection:
          type: string
          format: date-time
          description: Last connection to the broker timestamp.
        last_disconnection:
          type: string
          format: date-time
          description: Last device disconnection timestamp.
        first_registration:
          type: string
          format: date-time
          description: First registration attempt timestamp.
        first_credentials_request:
          type: string
          format: date-time
          description: First credentials request timestamp.
        last_seen_ip:
          type: string
          description: Last known device IP address.
        credentials_inhibited:
          type: boolean
          description: true if the device has been inhibited (i.e. it can't request new credentials)
        last_credentials_request_ip:
          type: string
          description: Last known device IP address used while obtaining credentials.
        total_received_bytes:
          type: integer
          description: Total ammount of received payload bytes.
        total_received_msgs:
          type: integer
          description: Total ammount of received messages.
        groups:
          type: array
          description: The groups the device belongs to.
          items:
            type: string
        previous_interfaces:
          type: array
          description: The list of previously supported interfaces
          items:
            type: object
            description: >-
              An object representing an interface that was previously declared in the introspection
              by the device
            properties:
              name:
                type: string
                description: The name of the interface
              major:
                type: integer
                description: The major version of the interface
              minor:
                type: integer
                description: The minor version of the interface
              exchanged_msgs:
                type: integer
                description: >-
                  The number of exchanged messages of this interface. Note that exchanged messages
                  are the same for all (interface, major) combinations, i.e. com.my.Interface v1.2
                  will have the same exchanged_msgs of com.my.Interface v1.x for every value of x
              exchanged_bytes:
                type: integer
                description: >-
                  The number of exchanged bytes of this interface. Note that exchanged bytes
                  are the same for all (interface, major) combinations, i.e. com.my.Interface v1.2
                  will have the same exchanged_bytes of com.my.Interface v1.x for every value of x
        deletion_in_progress:
          type: boolean
          description: True if the device is currently being deleted, false otherwise.
      example:
        id: hm8AjtbN5P2mxo_gfXSfvQ
        aliases:
          serial_number: '1234567'
          display_name: my_device_name
        attributes:
          attribute_key: attribute_value
        introspection:
          com.example.ExampleInterface:
            major: 2
            minor: 0
            exchanged_msgs: 20
            exchanged_bytes: 200
          com.example.HelloWorldInterface:
            major: 1
            minor: 1
            exchanged_msgs: 3
            exchanged_bytes: 42
        connected: false
        last_connection: '2017-09-28T03:45:00.000Z'
        last_disconnection: '2017-09-29T18:25:00.000Z'
        first_registration: '2016-07-08T09:44:00.000Z'
        first_credentials_request: '2016-08-20T09:44:00.000Z'
        last_seen_ip: 198.51.100.81
        credentials_inhibited: false
        last_credentials_request_ip: 98.51.100.89
        total_received_bytes: 10240
        total_received_msgs: 10
        groups:
          - test-devices
          - first-floor
        previous_interfaces:
          - name: com.example.ExampleInterface
            major: 1
            minor: 1
            exchanged_msgs: 5
            exchanged_bytes: 102
        deletion_in_progress: false
    CreateGroupConfig:
      type: object
      required:
        - group_name
        - devices
      properties:
        group_name:
          type: string
          example: mygroupname
        devices:
          type: array
          items:
            type: string
          example:
            - v8UxxIT9RkyPjIJZt6-Rrw
            - fhd0WHcgSjWeVqPGKZv_KA
    GroupConfig:
      type: object
      properties:
        group_name:
          type: string
          example: mygroupname
    DevicesStats:
      type: object
      properties:
        total_devices:
          description: The total number of devices in the Realm
          type: integer
          example: 203
        connected_devices:
          description: The number of devices currently connected in the Realm
          type: integer
          example: 30
    NotFoundError:
      type: object
      properties:
        errors:
          type: object
          properties:
            detail:
              type: string
              description: Short error description
      example:
        errors:
          detail: Device not found
    UnauthorizedError:
      type: object
      properties:
        errors:
          type: object
          properties:
            detail:
              type: string
              description: Short error description
      example:
        errors:
          detail: Unauthorized
    MissingTokenError:
      type: object
      properties:
        errors:
          type: object
          properties:
            detail:
              type: string
              description: Short error description
      example:
        errors:
          detail: Missing authorization token

    InvalidTokenError:
      type: object
      properties:
        errors:
          type: object
          properties:
            detail:
              type: string
              description: Short error description
      example:
        errors:
          detail: Invalid JWT token

    InvalidAuthPathError:
      type: object
      properties:
        errors:
          type: object
          properties:
            detail:
              type: string
              description: Short error description
      example:
        errors:
          detail: Authorization failed due to an invalid path

    AuthorizationPathNotMatchedError:
      type: object
      properties:
        errors:
          type: object
          properties:
            detail:
              type: string
              description: Detailed error message including the method and path
      example:
        errors:
          detail: Unauthorized access to GET /api/v1/some_path. Please verify your permissions
