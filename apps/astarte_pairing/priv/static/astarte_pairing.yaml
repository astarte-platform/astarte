openapi: 3.0.0
servers:
  - url: '{base_url}/v1'
    variables:
      base_url:
        default: http://localhost:4003
        description: >-
          The base URL you're serving Astarte from. This should point to the base
          path from which Pairing API is served. In case you are running
          a local installation, this is likely `http://localhost:4003`. In case you have a
          standard Astarte installation, it is most likely `https://<your host>/pairing`.
info:
  description: 'Control device registration, authentication an authorization'
  version: 1.2.0
  title: Astarte Pairing API
  contact:
    email: info@ispirata.com
tags:
  - name: agent
    description: Device registration and credentials secret emission
    externalDocs:
      description: Find out more
      url: 'https://docs.astarte-platform.org/astarte/1.0/050-pairing_mechanism.html'
  - name: device
    description: Device credentials emission and info
    externalDocs:
      description: Find out more
      url: 'https://docs.astarte-platform.org/astarte/1.0/050-pairing_mechanism.html'
paths:
  '/{realm_name}/agent/devices':
    post:
      tags:
        - agent
      summary: Register a device
      description: >-
        Register a device, obtaining its credentials secret. The registration
        can be repeated as long as the device didn't request any credentials.
        An optional initial introspection for the device can be passed in the
        registration request.
      operationId: registerDevice
      security:
        - JWT: []
      parameters:
        - name: realm_name
          in: path
          description: Name of the realm the device belongs to.
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Device registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/DeviceRegistrationResponse'
              examples:
                response:
                  value:
                    data:
                      credentials_secret: TTkd5OgB13X/3qU0LXU7OCxyTXz5QHM2NY1IgidtPOs=
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        '422':
          description: Unprocessable entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
              examples:
                response:
                  value:
                    errors:
                      hw_id:
                        - can't be blank
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: '#/components/schemas/DeviceRegistrationRequest'
              example:
                data:
                  hw_id: YHjKs3SMTgqq09eD7fzm6w
                  initial_introspection:
                    org.astarte-platform.genericsensors.Values:
                      major: 0
                      minor: 1
                    org.astarte-platform.genericsensors.AvailableSensors:
                      major: 0
                      minor: 1
        description: Device parameters
        required: true
  '/{realm_name}/agent/devices/{device_id}':
    delete:
      tags:
        - agent
      summary: Unregister a device
      description: >-
        Unregister a device. This makes it possible to register it again, even
        if it already has requested its credentials. All data belonging to the
        device will be kept as is.
      operationId: unregisterDevice
      security:
        - JWT: []
      parameters:
        - name: realm_name
          in: path
          description: Name of the realm the device belongs to.
          required: true
          schema:
            type: string
        - name: device_id
          in: path
          description: The Device ID of the device that will be unregistered.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Device unregistered
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        '404':
          description: Device not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
              examples:
                response:
                  value:
                    errors:
                      detail: Device not found
  '/{realm_name}/devices/{hw_id}':
    get:
      tags:
        - device
      summary: Obtain status informations for a device
      operationId: getInfo
      security:
        - CredentialsSecret: []
      parameters:
        - name: realm_name
          in: path
          description: Name of the realm the device belongs to.
          required: true
          schema:
            type: string
        - name: hw_id
          in: path
          description: Hardware id of the device.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Info
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/InfoResponse'
              examples:
                response:
                  value:
                    data:
                      version: 0.1.0
                      status: confirmed
                      protocols:
                        astarte_mqtt_v1:
                          broker_url: 'ssl://broker.astarte.example.com:8883'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
  '/{realm_name}/devices/{hw_id}/protocols/astarte_mqtt_v1/credentials':
    post:
      tags:
        - device
      summary: Obtain the credentials for Astarte MQTT v1 protocol
      operationId: obtainCredentials
      security:
        - CredentialsSecret: []
      parameters:
        - name: realm_name
          in: path
          description: Name of the realm the device belongs to.
          required: true
          schema:
            type: string
        - name: hw_id
          in: path
          description: Hardware id of the device
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Credentials created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AstarteMQTTV1CredentialsResponse'
              examples:
                response:
                  value:
                    data:
                      client_crt: >
                        -----BEGIN CERTIFICATE-----
                        MIIFfzCCA2egAwIBAgIJALsySXafOY1aMA0GCSqGSIb3DQEBCwUAMFYxCzAJBgNV
                        BAYTAklUMRAwDgYDVQQIDAdFeGFtcGxlMSEwHwYDVQQKDBhJbnRlcm5ldCBXaWRn
                        aXRzIFB0eSBMdGQxEjAQBgNVBAMMCXRlc3QvaHdpZDAeFw0xNzEwMTgxNTE2MzBa
                        Fw0xODEwMTgxNTE2MzBaMFYxCzAJBgNVBAYTAklUMRAwDgYDVQQIDAdFeGFtcGxl
                        MSEwHwYDVQQKDBhJbnRlcm5ldCBXaWRnaXRzIFB0eSBMdGQxEjAQBgNVBAMMCXRl
                        c3QvaHdpZDCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAKVsOtA5JoWo
                        nOF7BASELrkbus/miu9ySu9u/DtQyrsQcUm5dYHbI0jET9CQv+mI46oNzNDkhQUJ
                        +1d82fYgd8mkSglKE8QValmIDJzEwRTMVhsj8i8UydwAiuj0wRuW+hHZw1t3kLXL
                        4e/CsLBejqKXAWBLxpDgYNulU5c11Dzof7+So8m/y1Kg9TMCgqF979u1jlHA19x8
                        PVeUeAcFvrjiV+cr4XbzNCGBMH1f/bm93dBJjbOEuSVCEm4XE5XnvRT3hWSSp3eV
                        9P1uRCNyUTkFuru/f/bkVQsvO+YU39IlNePIEozjvdiZeqXqAmei4JugLWhq/Qwy
                        skCS/7avlOmgbGjJd8zSGAAl8/0hUH4YkJ4zcvp7rzc/Ze/E7VJuQOrxbmCpaIBo
                        C8s3geMCu+7vzyixkgtvG6lWrX7xzMKPbAX5ciBXYMiNIB14GSlPEn6RqFmPnB0Z
                        azUtMY8qYVSPSGo12vuWCt6grCh3cpFakWg6LnviW035iClPhup6JXs42jb1UMZv
                        kY9eNWICJ+mOZYBEVgFqL5cTVwRis7ZDkBvcuhEOxn6OwkicQuvTWhmFNDttZM9M
                        0YAvGzdQU6mtqH7GOHjqi5hSrZ8vthi275jL9sQv9fuEtjTM6r3zE+sFgwTbxSeq
                        Rk2M/smGcy8NMfke63j/NFCKcAJeexkLAgMBAAGjUDBOMB0GA1UdDgQWBBTpVKpD
                        FWDodB9WohGhL6Q3kMUITDAfBgNVHSMEGDAWgBTpVKpDFWDodB9WohGhL6Q3kMUI
                        TDAMBgNVHRMEBTADAQH/MA0GCSqGSIb3DQEBCwUAA4ICAQAxlhkVPkKv2mKvXspj
                        codSBTfIBMV+TdlwKKT+3A71k0fpS3HSvH98lLxkZLHPQuTi4/hpscITzvdfyLnG
                        HFRrCwc3v2x8d3/Fny7MPJu+5HLRMdDXVOSQXOUcA+P1KwibXWwp6GG8kZJ+VWAW
                        eRiOFwptBje8tdeF3YkEHS5GJ92DOyUc6As2UjCu+Psx0cB5Kevny4XFcekUs1Bd
                        hYH1Hnr/WFZJQJz68Bp+APr36UusQRo7a4YrOwnlYszGqrZQtQNRY8XVP5pC/YhD
                        cVtXOyU9NkCPlvxsCdTXObeQq38yxLm6gXi3cJBb1eAL0tBAXky0sLrzOHq462Cn
                        nzvGySpFjMtO4ZTK9hOp4o9/vXx2U/AWk62yCrhDtD8mlV+ljIbw2V6rFJsFnBsX
                        DFG3ljCR7sW+YCLtn/Fig/H07alBr3GiTjAG8vCSMAbvk/QMs1MNEj55FpXY/B6h
                        EXK2dEY+KPwMSBSwxrrZ74BXw0TWcwTVTRpkmtZ8qLTnXYOQ5kYKJ+aDR389+Vy6
                        d4NjjktgugxaL4tGkSMwiinZbBeG9oxtOgZOKQ/W+K1qzCb2ySH2hk5NTdbt7fQX
                        1o2dS9VvunQFSNA8diqBSOjuyoEuR6qo1ejF0o7KW6cJWMsvqq+awKuNmqM7yG59
                        ySj0xif2Z8U7MTfhmZs1cyDA/A==
                        -----END CERTIFICATE-----
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        '422':
          description: Unprocessable entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
              examples:
                response:
                  value:
                    errors:
                      purpose:
                        - can't be blank
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: '#/components/schemas/AstarteMQTTV1CredentialsRequest'
              example:
                data:
                  csr: >
                    -----BEGIN CERTIFICATE REQUEST-----
                    MIICnTCCAYUCAQAwWDELMAkGA1UEBhMCSVQxFDASBgNVBAgMC0V4YW1wbGVMYW5k
                    MSEwHwYDVQQKDBhJbnRlcm5ldCBXaWRnaXRzIFB0eSBMdGQxEDAOBgNVBAMMB0V4
                    YW1wbGUwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC6B6eGPsTLsP09
                    FzxFUKY95GaPnBU1niq1tx1vtA+r9BBnnoUn4JwNHtu5YTWMnlIJtfAs43ltLOrS
                    Wyvcedg4e6Bh3nztqyD+4uSpzlSI54zexbztVAzzDvVlEuW0wMRgkqF7ez7OixGF
                    BHdPgWKTxagVrYdqX/UjNm9f/Wnd3eCA9mEVwsARUlxRgLs0KPXPkqEGCxbcLSx3
                    lJR28YE+OTJK7aLSUk3bjLml23SYhWSlmYbNghu3/2P3n4QO4s6+RAw1bMxEO0xr
                    gvZThRcdllw+SQRY03VHzCiAAAYzKR8upy5strSbQfG9D38xHGb+A/Z6oSaJp4tR
                    m+VknzINAgMBAAGgADANBgkqhkiG9w0BAQsFAAOCAQEALvDY6irBZJXuJ+AZ/5rL
                    EEpWXl3f6ohdGkUE9oZFBsNQkCyejQbwYF4ujmxI7CqhZFrX6TA6KkjzDuWwqezt
                    YcyYYBgxF8+HUO/66jseGuJiuPkeDQ5e2Kghit8PPutv9I1OVPaQkbNg6aDvaANT
                    oB9IilYaxWM6en+RdtSg6p5dysfgOM3GbWqIjjZgU1rZsiuTOPRjxzXLc4Vq0v/A
                    MvsV2OFBjcOPfqeTwuegl16reSy9+x79zmSfzapoji90Cc1hBQgqvPYCezEeuj+i
                    hXQ3OSmKiyvSLJekdmgqdjsu7ks49Tm7wSUKC0QxlDh54k5Yo8uDM+4MLvOZOzL3
                    FQ==
                    -----END CERTIFICATE REQUEST-----
        description: Credentials request
        required: true
  '/{realm_name}/devices/{hw_id}/protocols/astarte_mqtt_v1/credentials/verify':
    post:
      tags:
        - device
      summary: Verify the credentials for Astarte MQTT v1 protocol
      operationId: verifyCredentials
      security:
        - CredentialsSecret: []
      parameters:
        - name: realm_name
          in: path
          description: Name of the realm the device belongs to.
          required: true
          schema:
            type: string
        - name: hw_id
          in: path
          description: Hardware id of the device
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Credentials verified
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: >-
                      #/components/schemas/AstarteMQTTV1VerifyCredentialsResponse
              examples:
                response valid certificate:
                  value:
                    data:
                      valid: true
                      until: 2025-03-25 19:25:00.000Z
                response invalid certificate:
                  value:
                    data:
                      valid: false
                      cause: INVALID_ISSUER
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        '422':
          description: Unprocessable entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
              examples:
                response:
                  value:
                    errors:
                      purpose:
                        - can't be blank
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: '#/components/schemas/AstarteMQTTV1VerifyCredentialsRequest'
              example:
                data:
                  client_crt: >
                    -----BEGIN CERTIFICATE-----
                    MIIFfzCCA2egAwIBAgIJALsySXafOY1aMA0GCSqGSIb3DQEBCwUAMFYxCzAJBgNV
                    BAYTAklUMRAwDgYDVQQIDAdFeGFtcGxlMSEwHwYDVQQKDBhJbnRlcm5ldCBXaWRn
                    aXRzIFB0eSBMdGQxEjAQBgNVBAMMCXRlc3QvaHdpZDAeFw0xNzEwMTgxNTE2MzBa
                    Fw0xODEwMTgxNTE2MzBaMFYxCzAJBgNVBAYTAklUMRAwDgYDVQQIDAdFeGFtcGxl
                    MSEwHwYDVQQKDBhJbnRlcm5ldCBXaWRnaXRzIFB0eSBMdGQxEjAQBgNVBAMMCXRl
                    c3QvaHdpZDCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAKVsOtA5JoWo
                    nOF7BASELrkbus/miu9ySu9u/DtQyrsQcUm5dYHbI0jET9CQv+mI46oNzNDkhQUJ
                    +1d82fYgd8mkSglKE8QValmIDJzEwRTMVhsj8i8UydwAiuj0wRuW+hHZw1t3kLXL
                    4e/CsLBejqKXAWBLxpDgYNulU5c11Dzof7+So8m/y1Kg9TMCgqF979u1jlHA19x8
                    PVeUeAcFvrjiV+cr4XbzNCGBMH1f/bm93dBJjbOEuSVCEm4XE5XnvRT3hWSSp3eV
                    9P1uRCNyUTkFuru/f/bkVQsvO+YU39IlNePIEozjvdiZeqXqAmei4JugLWhq/Qwy
                    skCS/7avlOmgbGjJd8zSGAAl8/0hUH4YkJ4zcvp7rzc/Ze/E7VJuQOrxbmCpaIBo
                    C8s3geMCu+7vzyixkgtvG6lWrX7xzMKPbAX5ciBXYMiNIB14GSlPEn6RqFmPnB0Z
                    azUtMY8qYVSPSGo12vuWCt6grCh3cpFakWg6LnviW035iClPhup6JXs42jb1UMZv
                    kY9eNWICJ+mOZYBEVgFqL5cTVwRis7ZDkBvcuhEOxn6OwkicQuvTWhmFNDttZM9M
                    0YAvGzdQU6mtqH7GOHjqi5hSrZ8vthi275jL9sQv9fuEtjTM6r3zE+sFgwTbxSeq
                    Rk2M/smGcy8NMfke63j/NFCKcAJeexkLAgMBAAGjUDBOMB0GA1UdDgQWBBTpVKpD
                    FWDodB9WohGhL6Q3kMUITDAfBgNVHSMEGDAWgBTpVKpDFWDodB9WohGhL6Q3kMUI
                    TDAMBgNVHRMEBTADAQH/MA0GCSqGSIb3DQEBCwUAA4ICAQAxlhkVPkKv2mKvXspj
                    codSBTfIBMV+TdlwKKT+3A71k0fpS3HSvH98lLxkZLHPQuTi4/hpscITzvdfyLnG
                    HFRrCwc3v2x8d3/Fny7MPJu+5HLRMdDXVOSQXOUcA+P1KwibXWwp6GG8kZJ+VWAW
                    eRiOFwptBje8tdeF3YkEHS5GJ92DOyUc6As2UjCu+Psx0cB5Kevny4XFcekUs1Bd
                    hYH1Hnr/WFZJQJz68Bp+APr36UusQRo7a4YrOwnlYszGqrZQtQNRY8XVP5pC/YhD
                    cVtXOyU9NkCPlvxsCdTXObeQq38yxLm6gXi3cJBb1eAL0tBAXky0sLrzOHq462Cn
                    nzvGySpFjMtO4ZTK9hOp4o9/vXx2U/AWk62yCrhDtD8mlV+ljIbw2V6rFJsFnBsX
                    DFG3ljCR7sW+YCLtn/Fig/H07alBr3GiTjAG8vCSMAbvk/QMs1MNEj55FpXY/B6h
                    EXK2dEY+KPwMSBSwxrrZ74BXw0TWcwTVTRpkmtZ8qLTnXYOQ5kYKJ+aDR389+Vy6
                    d4NjjktgugxaL4tGkSMwiinZbBeG9oxtOgZOKQ/W+K1qzCb2ySH2hk5NTdbt7fQX
                    1o2dS9VvunQFSNA8diqBSOjuyoEuR6qo1ejF0o7KW6cJWMsvqq+awKuNmqM7yG59
                    ySj0xif2Z8U7MTfhmZs1cyDA/A==
                    -----END CERTIFICATE-----
        description: Credentials verification request
        required: true
components:
  securitySchemes:
    JWT:
      type: apiKey
      name: Authorization
      in: header
      description: >
        For accessing the agent API a valid JWT token must be passed in all the
        queries in the 'Authorization' header.

        The following syntax must be used in the 'Authorization' header :
          Bearer xxxxxx.yyyyyyy.zzzzzz
    CredentialsSecret:
      type: apiKey
      name: Authorization
      in: header
      description: >
        For accessing the device API a valid Credentials Secret must be passed
        in all the queries in the 'Authorization' header

        The following syntax must be used in the 'Authorization' header :
          Bearer xxxxxxxxxxxxxxxxxxxxx
  schemas:
    DeviceRegistrationRequest:
      type: object
      required:
        - hw_id
      properties:
        hw_id:
          type: string
        initial_introspection:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/IntrospectionEntry'
          description: >-
            An optional object specifying the initial introspection for the device. The keys
            of the object are the interface names, while the values are objects with the "major"
            and "minor" properties, specifying the major and minor version of the interface
            that is going to be supported by the device.
          example:
            org.astarte-platform.genericsensors.Values:
              major: 0
              minor: 1
            org.astarte-platform.genericsensors.AvailableSensors:
              major: 0
              minor: 1
    IntrospectionEntry:
      type: object
      required:
        - major
        - minor
      properties:
        major:
          type: integer
          description: The major version of the interface
        minor:
          type: integer
          description: The minor version of the interface
    DeviceRegistrationResponse:
      type: object
      properties:
        credentials_secret:
          type: string
    InfoResponse:
      type: object
      properties:
        version:
          type: string
        status:
          type: string
        protocols:
          type: object
    AstarteMQTTV1CredentialsRequest:
      type: object
      properties:
        csr:
          type: string
    AstarteMQTTV1CredentialsResponse:
      type: object
      properties:
        client_crt:
          type: string
    AstarteMQTTV1VerifyCredentialsRequest:
      type: object
      properties:
        client_crt:
          type: string
    AstarteMQTTV1VerifyCredentialsResponse:
      type: object
      properties:
        valid:
          type: boolean
          description: 'true if the credentials are valid, false otherwise'
        timestamp:
          type: integer
          description: the timestamp of the credentials verification
        until:
          type: integer
          description: >-
            if the certificate is valid, the timestamp after which it will be
            invalid
        cause:
          type: string
          description: the reason the certificate is invalid
        details:
          type: string
          description: additional details on the verification
    ForbiddenResponse:
      description: Forbidden response
      type: object
      properties:
        errors:
          type: object
          properties:
            detail:
              type: string
      example:
        errors:
          detail: Forbidden
    GenericErrorResponse:
      type: object
      properties:
        errors:
          type: object
    UnauthorizedResponse:
      description: Unauthorized response
      properties:
        errors:
          type: object
          properties:
            detail:
              type: string
      example:
        errors:
          detail: Unauthorized
